language: cpp
os: linux
dist: trusty
sudo: false

matrix:
  include:
    ##########################################################################
    # Build with all the supported compilers
    ##########################################################################
    # Clang 5.0
    - env: UNIT_TESTS=true COMPILER=clang++-5.0
      addons: &defaults { apt: { packages: ["clang-5.0", "graphviz"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-5.0"] } }

    # GCC 7
    - env: UNIT_TESTS=true COMPILER=g++-7
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }

    ##########################################################################
    # Generate the documentation
    ##########################################################################
    - env: DOCUMENTATION=true COMPILER=default CMAKE_OPTIONS="-DUMLAUT_ENABLE_TESTS=OFF"
      addons: *defaults

    ##########################################################################
    # Generate code coverage
    ##########################################################################
    - env: COVERAGE=true UNIT_TESTS=true COMPILER=default CMAKE_OPTIONS="-DUMLAUT_ENABLE_COVERAGE=ON"
      addons: *defaults

install:
  ############################################################################
  # All the dependencies are installed in ${HOME}/deps/
  ############################################################################
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override CXX set by Travis if needed
  ############################################################################
  - if [[ "${COMPILER}" == "default" ]]; then COMPILER=clang++-5.0; fi

  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - ${CXX} --version

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # Install libc++ and libc++abi if needed
  ############################################################################
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      LLVM_VERSION="6.0.1"
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm || exit 1
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx || exit 1
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi || exit 1
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install) || exit 1
      (cd llvm/build/projects/libcxx && make install -j2) || exit 1
      (cd llvm/build/projects/libcxxabi && make install -j2) || exit 1
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
      doxygen --version
    fi

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd "${TRAVIS_BUILD_DIR}"
  - (mkdir build && cd build && cmake .. ${CMAKE_OPTIONS})

script:
  ############################################################################
  # Build and push documentation
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      (cd build && ! cmake --build . --target doc 2>&1 | grep -E "warning|error") || exit 1

      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        # Suppress output to avoid leaking the token when the command fails
        git clone https://malarsson:${GITHUB_TOKEN}@github.com/malarsson/umlaut --depth 1 --branch=gh-pages doc/html &>/dev/null

        rm -rf doc/html/{search,*.png,*.css,*.js,*.html}
        cp -R build/html/* doc/html/

        pushd doc/html
        git add --all .
        git commit --allow-empty -m "update documentation to ${TRAVIS_COMMIT:0:7}"

        # Suppress output to avoid leaking the token
        git push origin gh-pages &>/dev/null
        popd
      fi
    fi

  ############################################################################
  # Build and run the unit tests
  ############################################################################
  - |
    if [[ "${UNIT_TESTS}" == "true" ]]; then
      (cd build && cmake --build . --target check -- -j2)
    fi

after_success:
  - if [[ ${COVERAGE} == "true" ]]; then bash <(curl -s https://codecov.io/bash); fi
